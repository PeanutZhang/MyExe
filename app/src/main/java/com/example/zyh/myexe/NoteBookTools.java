package com.example.zyh.myexe;import android.content.ContentProviderOperation;import android.content.ContentProviderResult;import android.content.ContentResolver;import android.content.Context;import android.content.OperationApplicationException;import android.database.Cursor;import android.net.Uri;import android.os.RemoteException;import android.provider.ContactsContract;import android.provider.ContactsContract.CommonDataKinds.Phone;import android.provider.ContactsContract.CommonDataKinds.StructuredName;import android.provider.ContactsContract.Contacts.Photo;import android.provider.ContactsContract.Data;import android.provider.ContactsContract.RawContacts;import android.text.TextUtils;import android.util.Log;import java.util.ArrayList;import java.util.List;public class NoteBookTools {	/** 获取库Phon表字段 **/	private static final String[] PHONES_PROJECTION = new String[] { Phone.DISPLAY_NAME, Phone.NUMBER, Photo.PHOTO_ID,			Phone.CONTACT_ID };	/** 联系人显示名称 **/	private static final int PHONES_DISPLAY_NAME_INDEX = 0;	/** 电话号码 **/	private static final int PHONES_NUMBER_INDEX = 1;	/** 头像ID **/	private static final int PHONES_PHOTO_ID_INDEX = 2;	/** 联系人的ID **/	private static final int PHONES_CONTACT_ID_INDEX = 3;	// 根据号码获取联系人的姓名	public void testContactNameByNumber(Context context) throws Exception {		String number = "110";		Uri uri = Uri.parse("content://com.android.contacts/data/phones/filter/" + number);		ContentResolver resolver = context.getContentResolver();		Cursor cursor = resolver.query(uri, new String[] { android.provider.ContactsContract.Data.DISPLAY_NAME }, null,				null, null);		if (cursor.moveToFirst()) {			String name = cursor.getString(0);			Log.i("TAG", name);		}		cursor.close();	}	// 删除方法	public void testDelete(Context context) throws Exception {		String name = "李小龙";		// 根据姓名求id		Uri uri = Uri.parse("content://com.android.contacts/raw_contacts");		ContentResolver resolver = context.getContentResolver();		Cursor cursor = resolver.query(uri, new String[] { Data._ID }, "display_name=?", new String[] { name }, null);		if (cursor.moveToFirst()) {			int id = cursor.getInt(0);			// 根据id删除data中的相应数据			resolver.delete(uri, "display_name=?", new String[] { name });			uri = Uri.parse("content://com.android.contacts/data");			resolver.delete(uri, "raw_contact_id=?", new String[] { id + "" });		}	}	// 清空全部联系人	public void deleteAllPeople(Context context) {		ContentResolver cr = context.getContentResolver();		Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);		Log.i("cur", cur + "");		if (cur != null) {			while (cur.moveToNext()) {				try {					String lookupKey = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.LOOKUP_KEY));					// Log.i("lookKupKey", lookupKey);					String lookupKey1 = lookupKey.substring(6, 8);					// Log.i("lookupKey1", lookupKey1);					Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_LOOKUP_URI, lookupKey);					// Log.i("TAG", "----------" + uri.toString());					// 获取联系人姓名，通过联系人姓名删除联系人					String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));					Log.i("deleteName", name);					String detelename1 = name.substring(0, 4);					// Log.i("deleteName", detelename1);					if (detelename1.equals("加粉神器")||detelename1.equals("-")) {						cr.delete(uri, null, null);						System.out.println("已清空通讯录");					}				} catch (Exception e) {					System.out.println(e.getStackTrace());				}			}		}	}	public void deleteAllPeople1(Context context) {		ContentResolver cr = context.getContentResolver();		Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);		Log.i("cur", cur + "");		if (cur != null) {			while (cur.moveToNext()) {				try {					String lookupKey = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.LOOKUP_KEY));					// Log.i("lookKupKey", lookupKey);					String lookupKey1 = lookupKey.substring(6, 8);					// Log.i("lookupKey1", lookupKey1);					Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_LOOKUP_URI, lookupKey);					// Log.i("TAG", "----------" + uri.toString());					// 获取联系人姓名，通过联系人姓名删除联系人					String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));					Log.i("deleteName", name);					String detelename1 = name.substring(0, 4);					// Log.i("deleteName", detelename1);					cr.delete(uri, null, null);					System.out.println("已清空通讯录");				} catch (Exception e) {					System.out.println(e.getStackTrace());				}			}		}	}	/**	 * 批量添加通讯录	 * @throws android.content.OperationApplicationException	 * @throws android.os.RemoteException	 */	public int batchAddContact(List<People> list, Context context)			throws RemoteException, OperationApplicationException {		if (list == null || list.size() <= 0) {			return 0;		}		int contant = 0;		System.out.println("写入时的数量+++++++++++"+list.size());		// ContactUtility con = new ContactUtility(context);		int rawContactInsertIndex = 0;		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();		for (People contact : list) {			contant++;			System.out.println(contant);			if (contact.getName() == null || "".equals(contact.getName())) {				continue;			}			rawContactInsertIndex = ops.size(); // 有了它才能给真正的实现批量添加			ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI)					.withValue(RawContacts.ACCOUNT_TYPE, null).withValue(RawContacts.ACCOUNT_NAME, null)					.withYieldAllowed(true).build());			// 添加姓名			ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)					.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)					.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE)					.withValue(StructuredName.DISPLAY_NAME, contact.getName()).withYieldAllowed(true).build());			Log.i("姓名",					ContentProviderOperation.newInsert(Data.CONTENT_URI)							.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)							.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE)							.withValue(StructuredName.DISPLAY_NAME, contact.getName()).withYieldAllowed(true).build()							+ "");			// 添加号码			if (contact.getMobile() != null && !"".equals(contact.getMobile())) {				ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)						.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)						.withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE).withValue(Phone.NUMBER, contact.getMobile())						.withValue(Phone.TYPE, Phone.TYPE_MOBILE).withYieldAllowed(true).build());				Log.i("号码", "" + ContentProviderOperation.newInsert(Data.CONTENT_URI)						.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)						.withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE).withValue(Phone.NUMBER, contact.getMobile())						.withValue(Phone.TYPE, Phone.TYPE_MOBILE).withYieldAllowed(true).build());				// ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI)				// .withValue(RawContacts.ACCOUNT_TYPE, null)				// .withValue(RawContacts.ACCOUNT_NAME, null)				// .withValue(RawContacts.SOURCE_ID, "1000"+i)				// .withYieldAllowed(true).build());			}		}		if (ops != null) {			// 真正添加			ContentProviderResult[] results = context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);			if (results != null) {				// for (ContentProviderResult result : results) {				// Log.e("URI:" + result.uri, "count:" + result.count);				// }				return results.length;			}		}		return 0;	}	/**	 * 批量添加通讯录联系人号码不唯一	 *	 * @throws android.content.OperationApplicationException	 * @throws android.os.RemoteException	 */	public int batchAddContacts(List<People> list, Context context)			throws RemoteException, OperationApplicationException {		if (list == null || list.size() <= 0) {			return 0;		}		// ContactUtility con = new ContactUtility(context);		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();		int rawContactInsertIndex = 0;		for (People contact : list) {			System.out.println("添加时遍历的数据List"+contact+"list的size"+list.size());			if (contact.getName() == null || "".equals(contact.getName())) {				continue;			}			rawContactInsertIndex = ops.size(); // 有了它才能给真正的实现批量添加			if (contact.getMobileList() != null) {				ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI)						.withValue(RawContacts.ACCOUNT_TYPE, null).withValue(RawContacts.ACCOUNT_NAME, null)						.withYieldAllowed(true).build());				// 添加姓名				ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)						.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)						.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE)						.withValue(StructuredName.DISPLAY_NAME, contact.getName()).withYieldAllowed(true).build());				for (String phone : contact.getMobileList()) {					System.out.println("-------添加姓名phone-------" + phone);					ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)							.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex)							.withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE).withValue(Phone.NUMBER, phone)							.withValue(Phone.TYPE, Phone.TYPE_MOBILE).withValue(Phone.LABEL, "").withYieldAllowed(true)							.build());				}			}		}		ContentProviderResult[] results = null;		if (ops != null) {			try {				// 真正添加				int a  = ops.size();				System.out.println("AAAAAAAAAAAAAaaa"+a);				results = context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);				//	ContentProviderResult[] results = context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);				System.out.println("开始真的添加");				if (results != null) {					System.out.println("最后结果的长度"+results.length);					return results.length;				}			} catch (RemoteException e) {				Log.e("错误1", String.format("%s: %s", e.toString(), e.getMessage()));			} catch (OperationApplicationException e) {				Log.e("错误2", String.format("%s: %s", e.toString(), e.getMessage()));			}		}		return 0;	}	// 获取通讯录联系人的数量	public int getPhoneCount(Context context) {		int count = 0;		ContentResolver resolver = context.getContentResolver();		Cursor cursor = resolver.query(Phone.CONTENT_URI, PHONES_PROJECTION, null, null, null);		if (resolver != null) {			if (cursor != null) {				while (cursor.moveToNext()) {					String phoneNumber = cursor.getString(PHONES_NUMBER_INDEX);					if (TextUtils.isEmpty(phoneNumber))						continue;					count++;				}			}		}		if (cursor!=null) {			cursor.close();		}		return count;	}	/** 得到手机通讯录联系人信息 **/	public ArrayList<People> getPhoneContacts(Context mContext) {		ArrayList<People> list = new ArrayList<People>();		ContentResolver resolver = mContext.getContentResolver();		// 获取手机联系人		Cursor phoneCursor = resolver.query(Phone.CONTENT_URI, PHONES_PROJECTION, null, null, null);		if (phoneCursor != null) {			while (phoneCursor.moveToNext()) {				// 得到手机号码				String phoneNumber = phoneCursor.getString(PHONES_NUMBER_INDEX);				// 当手机号码为空的或者为空字段 跳过当前循环				if (TextUtils.isEmpty(phoneNumber))					continue;				// 得到联系人名称				String contactName = phoneCursor.getString(PHONES_DISPLAY_NAME_INDEX);				Log.i("联系人姓名", contactName);				// 得到联系人ID				Long contactid = phoneCursor.getLong(PHONES_CONTACT_ID_INDEX);				// 得到联系人头像ID				// Long photoid = phoneCursor.getLong(PHONES_PHOTO_ID_INDEX);				// 得到联系人头像Bitamp				// Bitmap contactPhoto = null;				// photoid 大于0 表示联系人有头像 如果没有给此人设置头像则给他一个默认的				// if (photoid > 0) {				// Uri uri = ContentUris.withAppendedId(				// ContactsContract.Contacts.CONTENT_URI, contactid);				// InputStream input = ContactsContract.Contacts				// .openContactPhotoInputStream(resolver, uri);				// contactPhoto = BitmapFactory.decodeStream(input);				// } else {				// contactPhoto = BitmapFactory.decodeResource(getResources(),				// R.drawable.contact_photo);				// }				People people = new People();				people.setId(contactid);				people.setName(contactName);				people.setMobile(phoneNumber);				list.add(people);			}			phoneCursor.close();		}		return list;	}	/*	 * 自定义显示Contacts提供的联系人的方法	 */	public ArrayList<People> getAllPhoneContacts(Context context) {		ArrayList<People> contactsList = new ArrayList<People>();		// 生成ContentResolver对象		ContentResolver contentResolver = context.getContentResolver();		// 获得所有的联系人		/*		 * Cursor cursor = contentResolver.query(		 * ContactsContract.Contacts.CONTENT_URI, null, null, null, null);		 * resolver.query(Phone.CONTENT_URI, PHONES_PROJECTION, null, null,		 * null);		 */		// 这段代码和上面代码是等价的，使用两种方式获得联系人的Uri		Cursor cursor = contentResolver.query(Uri.parse("content://com.android.contacts/contacts"), null, null, null,				null);		// 循环遍历		if (cursor != null) {			if (cursor.moveToFirst()) {				int idColumn = cursor.getColumnIndex(ContactsContract.Contacts._ID);				int displayNameColumn = cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);				do {					People people = new People();					// 获得联系人的ID					String contactId = cursor.getString(idColumn);					// 获得联系人姓名					String displayName = cursor.getString(displayNameColumn);					// 使用Toast技术显示获得的联系人信息					// Toast.makeText(context, "联系人姓名：" + displayName,					// Toast.LENGTH_LONG).show();					// System.out.println("联系人姓名：" + displayName);					people.setName(displayName);					// 查看联系人有多少个号码，如果没有号码，返回0					int phoneCount = cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));					if (phoneCount > 0) {						ArrayList<String> phoneList = new ArrayList<String>();						// 获得联系人的电话号码列表						Cursor phoneCursor = context.getContentResolver().query(								ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,								ContactsContract.CommonDataKinds.Phone.CONTACT_ID + "=" + contactId, null, null);						if (phoneCursor.moveToFirst()) {							do {								// 遍历所有的联系人下面所有的电话号码								String phoneNumber = phoneCursor.getString(										phoneCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));								// 使用Toast技术显示获得的号码								// Toast.makeText(context, "联系人电话：" +								// phoneNumber,								// Toast.LENGTH_LONG).show();								// System.out.println("联系人电话：" + phoneNumber);								phoneList.add(phoneNumber);							} while (phoneCursor.moveToNext());						}						phoneCursor.close();						people.setMobileList(phoneList);					}					contactsList.add(people);				} while (cursor.moveToNext());			}			cursor.close();		}		return contactsList;	}	/** 得到手机SIM卡联系人人信息 **/	public ArrayList<People> getSIMContacts(Context mContext) {		ArrayList<People> list = new ArrayList<People>();		ContentResolver resolver = mContext.getContentResolver();		// 获取Sims卡联系人		Uri uri = Uri.parse("content://icc/adn");		Cursor phoneCursor = resolver.query(uri, PHONES_PROJECTION, null, null, null);		if (phoneCursor != null) {			while (phoneCursor.moveToNext()) {				// 得到手机号码				String phoneNumber = phoneCursor.getString(PHONES_NUMBER_INDEX);				// 当手机号码为空的或者为空字段 跳过当前循环				if (TextUtils.isEmpty(phoneNumber))					continue;				// 得到联系人名称				String contactName = phoneCursor.getString(PHONES_DISPLAY_NAME_INDEX);				// 得到联系人ID				Long contactid = phoneCursor.getLong(PHONES_CONTACT_ID_INDEX);				// Sim卡中没有联系人头像				People people = new People();				people.setId(contactid);				people.setName(contactName);				people.setMobile(phoneNumber);				list.add(people);			}			phoneCursor.close();		}		return list;	}	// 获取当前联系人数量（通过一键爆粉）	public int getCountAkey(Context context) {		int count = 0;		ContentResolver cr = context.getContentResolver();		Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);		cur.getColumnCount();		if (cur != null) {			while (cur.moveToNext()) {				try {					String lookupKey = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.LOOKUP_KEY));					Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_LOOKUP_URI, lookupKey);					String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));					// Log.i("TAG", "----------" + uri.toString());					String name1 = name.substring(0, 4);					if (name1.equals("被动加粉")) {						count++;					}				} catch (Exception e) {					System.out.println(e.getStackTrace());				}			}		}		return count;	}}